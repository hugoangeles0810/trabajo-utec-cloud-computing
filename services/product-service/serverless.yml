service: gamarriando-product-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  tags:
    Project: gamarriando
    Environment: ${self:provider.stage}
    Service: product-service
    ManagedBy: serverless
  environment:
    STAGE: ${self:provider.stage}
    # Database Configuration (PostgreSQL with psycopg2)
    DB_HOST: ${env:DB_HOST, 'gamarriando-product-service-dev.cgb6u24c81zq.us-east-1.rds.amazonaws.com'}
    DB_PORT: ${env:DB_PORT, '5432'}
    DB_NAME: ${env:DB_NAME, 'gamarriando'}
    DB_USER: ${env:DB_USER, 'gamarriando'}
    DB_PASSWORD: ${env:DB_PASSWORD, 'Gamarriando2024!'}
    DATABASE_URL: ${env:DATABASE_URL, 'postgresql://gamarriando:Gamarriando2024!@gamarriando-product-service-dev.cgb6u24c81zq.us-east-1.rds.amazonaws.com:5432/gamarriando'}
    # Connection pool configuration
    DB_POOL_SIZE: ${env:DB_POOL_SIZE, '5'}
    DB_MAX_OVERFLOW: ${env:DB_MAX_OVERFLOW, '10'}
    DB_POOL_RECYCLE: ${env:DB_POOL_RECYCLE, '3600'}
    # JWT Configuration
    JWT_SECRET_KEY: ${env:JWT_SECRET_KEY, 'gamarriando-super-secret-jwt-key-dev'}
    JWT_ALGORITHM: ${env:JWT_ALGORITHM, 'HS256'}
    JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${env:JWT_ACCESS_TOKEN_EXPIRE_MINUTES, 30}
    # S3 Configuration
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME, 'gamarriando-product-images-${self:provider.stage}'}
    S3_REGION: ${env:S3_REGION, 'us-east-1'}
    # Application Settings
    DEBUG: ${env:DEBUG, 'false'}
    LOG_LEVEL: ${env:LOG_LEVEL, 'INFO'}
  role: arn:aws:iam::331005567943:role/GamarriandoLambdaRole
  # VPC Configuration for RDS access
  vpc:
    securityGroupIds:
      - sg-0b7776e36a7150695  # Lambda Security Group
    subnetIds:
      - subnet-0d8b3798c4f2897be  # us-east-1a
      - subnet-0f56032e6c45bd02d  # us-east-1b

functions:
  # Categories Functions
  categories_list:
    handler: handlers/categories_list.lambda_handler
    timeout: 20
    memorySize: 256
    events:
      - http:
          path: /api/v1/categories
          method: GET
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Requested-With
            allowCredentials: false
      - http:
          path: /api/v1/categories
          method: OPTIONS
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Requested-With
            allowCredentials: false

  categories_get:
    handler: handlers/categories_get.lambda_handler
    timeout: 20
    memorySize: 256
    events:
      - http:
          path: /api/v1/categories/{category_id}
          method: GET
          cors: true

  categories_create:
    handler: handlers/categories_create.lambda_handler
    timeout: 30
    memorySize: 512
    events:
      - http:
          path: /api/v1/categories
          method: POST
          cors: true

  categories_update:
    handler: handlers/categories_update.lambda_handler
    timeout: 30
    memorySize: 512
    events:
      - http:
          path: /api/v1/categories/{category_id}
          method: PUT
          cors: true

  categories_delete:
    handler: handlers/categories_delete.lambda_handler
    timeout: 20
    memorySize: 256
    events:
      - http:
          path: /api/v1/categories/{category_id}
          method: DELETE
          cors: true

  # Vendors Functions
  vendors_list:
    handler: handlers/vendors_list.lambda_handler
    timeout: 20
    memorySize: 256
    events:
      - http:
          path: /api/v1/vendors
          method: GET
          cors: true

  vendors_get:
    handler: handlers/vendors_get.lambda_handler
    timeout: 20
    memorySize: 256
    events:
      - http:
          path: /api/v1/vendors/{vendor_id}
          method: GET
          cors: true

  vendors_create:
    handler: handlers/vendors_create.lambda_handler
    timeout: 30
    memorySize: 512
    events:
      - http:
          path: /api/v1/vendors
          method: POST
          cors: true

  vendors_update:
    handler: handlers/vendors_update.lambda_handler
    timeout: 30
    memorySize: 512
    events:
      - http:
          path: /api/v1/vendors/{vendor_id}
          method: PUT
          cors: true

  vendors_delete:
    handler: handlers/vendors_delete.lambda_handler
    timeout: 20
    memorySize: 256
    events:
      - http:
          path: /api/v1/vendors/{vendor_id}
          method: DELETE
          cors: true

  # Products Functions
  products_list:
    handler: handlers/products_list.lambda_handler
    timeout: 20
    memorySize: 256
    events:
      - http:
          path: /api/v1/products
          method: GET
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Requested-With
            allowCredentials: false
      - http:
          path: /api/v1/products
          method: OPTIONS
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Requested-With
            allowCredentials: false

  products_get:
    handler: handlers/products_get.lambda_handler
    timeout: 20
    memorySize: 256
    events:
      - http:
          path: /api/v1/products/{product_id}
          method: GET
          cors: true

  products_create:
    handler: handlers/products_create.lambda_handler
    timeout: 30
    memorySize: 512
    events:
      - http:
          path: /api/v1/products
          method: POST
          cors: true

  products_update:
    handler: handlers/products_update.lambda_handler
    timeout: 30
    memorySize: 512
    events:
      - http:
          path: /api/v1/products/{product_id}
          method: PUT
          cors: true

  products_delete:
    handler: handlers/products_delete.lambda_handler
    timeout: 20
    memorySize: 256
    events:
      - http:
          path: /api/v1/products/{product_id}
          method: DELETE
          cors: true

# Using psycopg2 with Lambda Layer approach
plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    slim: false
    strip: false
    fileName: requirements.txt
    noDeps:
      - boto3
      - botocore

resources:
  # S3 Bucket for product images
  Resources:
    ProductImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: gamarriando-product-images-${self:provider.stage}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        Tags:
          - Key: Project
            Value: gamarriando
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: product-service
          - Key: ManagedBy
            Value: serverless

  Outputs:
    ApiUrl:
      Description: "API Gateway endpoint URL for Gamarriando Product Service"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/"
            - ${self:provider.stage}
      Export:
        Name: ${self:service}-${self:provider.stage}-apiUrl
    
    ProductImagesBucketName:
      Value:
        Ref: ProductImagesBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-productImagesBucket
    
    VPCConfiguration:
      Description: "VPC Configuration for Lambda functions"
      Value:
        Fn::Join:
          - ", "
          - - "VPC: vpc-0247fc2c1890c7403"
            - "Security Groups: sg-0b7776e36a7150695"
            - "Subnets: subnet-0d8b3798c4f2897be, subnet-0f56032e6c45bd02d"
    
    DatabaseInfo:
      Description: "RDS PostgreSQL Database Information"
      Value:
        Fn::Join:
          - ", "
          - - "Host: gamarriando-product-service-dev.cgb6u24c81zq.us-east-1.rds.amazonaws.com"
            - "Database: gamarriando"
            - "Port: 5432"